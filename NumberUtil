
package com.treemode.school.entity;

import java.math.BigDecimal;

/**
 *
 * @author alokdethe
 */
public class NumberUtil {
    
    public Double getDoubleFromBigDecimal(BigDecimal d){
        return d.doubleValue();
    }
    
    public BigDecimal getBigDecimalFromDouble(Number d){
        return (BigDecimal) d;
    }
    
    public BigDecimal getStringFromBigDecimal(String s){
        if( s == null ){
            return new BigDecimal(0);
        }
        if( s.isEmpty() ){
            return new BigDecimal(0);
        }
       Long s1 = Long.parseLong(s);
       return BigDecimal.valueOf(s1);
    }
    
    public Double getStringToDouble(String s){
        return Double.parseDouble(s);
    }
    
    public String getStringToDoubleUsingFormatter(Double d){
        
        return d.toString();
    }
    
    public String getIntToStringUsingFormatter(Integer i){
        
        return i.toString();
    }
    
    public boolean isGreater(BigDecimal b1, BigDecimal b2){
        if(b1.compareTo(b2) == 1){
            return true;
        }
        else if(b1.compareTo(b2) == 0){
            return false;
        }
        else if(b1.compareTo(b2) == -1){
            return false;
        }
        return false;
    }
    
    public boolean isLower(BigDecimal b1, BigDecimal b2){
        if(b1.compareTo(b2) == 1){
            return false;
        }
        else if(b1.compareTo(b2) == 0){
            return false;
        }
        else if(b1.compareTo(b2) == -1){
            return true;
        }
        return false;
    }
    
    public boolean isEqual(BigDecimal b1, BigDecimal b2){
        if(b1.compareTo(b2) == 1){
            return false;
        }
        else if(b1.compareTo(b2) == 0){
            return true;
        }
        else if(b1.compareTo(b2) == -1){
            return false;
        }
        return false;
    }
    
    public boolean isGreater(Double b1, Double b2){
        if(b1.compareTo(b2) == 1){
            return true;
        }
        else if(b1.compareTo(b2) == 0){
            return false;
        }
        else if(b1.compareTo(b2) == -1){
            return false;
        }
        return false;
    }
    
    public boolean isLower(Double b1, Double b2){
        if(b1.compareTo(b2) == 1){
            return false;
        }
        else if(b1.compareTo(b2) == 0){
            return false;
        }
        else if(b1.compareTo(b2) == -1){
            return true;
        }
        return false;
    }
    
    public boolean isEqual(Double b1, Double b2){
        if(b1.compareTo(b2) == 1){
            return false;
        }
        else if(b1.compareTo(b2) == 0){
            return true;
        }
        else if(b1.compareTo(b2) == -1){
            return false;
        }
        return false;
    }
    
}
